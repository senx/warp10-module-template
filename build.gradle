//
//   Copyright 2019 - 2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id 'java'
}

//
// Repositories for the project dependencies
//

repositories {
  mavenCentral()
}

task('bootstrap') {
  onlyIf {
    project.hasProperty('g') && project.hasProperty('a') && project.hasProperty('d')
  }

  //
  // Replace properties in build.gradle and settings.gradle
  //
  doLast {
    copy {
      from(file('build.gradle.template'))
      into(file('./'))
      rename({ f -> 'build.gradle' })
      filter(ReplaceTokens, tokens: [
        MODULE_GROUP: project.findProperty('g'),
        MODULE_ARTIFACT: project.findProperty('a'),
        MODULE_DESCRIPTION: project.findProperty('d')
      ])
    }
    copy {
      from(file('settings.gradle.template'))
      into(file('./'))
      rename({ f -> 'settings.gradle' })
      filter(ReplaceTokens, tokens: [
        MODULE_GROUP: project.findProperty('g'),
        MODULE_ARTIFACT: project.findProperty('a'),
        MODULE_DESCRIPTION: project.findProperty('d')
      ])
    }
    //
    // Create Java source directories
    //
    mkdir 'src/main/java'
    mkdir 'src/test/java'

    //
    // Create resource directory
    //
    mkdir 'src/main/resources'

    //
    // Create WarpScript source directory
    //
    def wsdir = 'src/main/warpscript/' + g + '/' + a
    mkdir wsdir

    //
    // Create template if the module type was specified (either ext or plugin)
    //
    if (project.hasProperty('t')) {
      def dir = g.replaceAll('\\.','/')
      mkdir 'src/main/java/' + dir

      if ('ext' == t) {
        copy {
          from(file('ext.template'))
          into(file('./src/main/java/' + dir))
          rename({ f -> 'PleaseRenameWarpScriptExtension.java' })
          filter(ReplaceTokens, tokens: [
            PACKAGE_NAME: project.findProperty('g'),
          ])
        }
        copy {
          from(file('function.template'))
          into(file('./src/main/java/' + dir))
          rename({ f -> 'PleaseRenameFunction.java' })
          filter(ReplaceTokens, tokens: [
            PACKAGE_NAME: project.findProperty('g'),
          ])
        }
        copy {
          from(file('ext.doc.mc2.template'))
          into(file(wsdir))
          rename({ f -> 'PleaseRenameFunction.mc2' })
          filter(ReplaceTokens, tokens: [
            MODULE_GROUP: project.findProperty('g'),
            MODULE_ARTIFACT: project.findProperty('a'),
            MODULE_DESCRIPTION: project.findProperty('d')
          ])
        }
      } else if ('plugin' == t) {
        copy {
          from(file('plugin.template'))
          into(file('./src/main/java/' + dir))
          rename({ f -> 'PleaseRenameWarp10Plugin.java' })
          filter(ReplaceTokens, tokens: [
            PACKAGE_NAME: project.findProperty('g'),
          ])
        }
      }
    }

    //
    // Rename warp10.conf
    //
    copy {
      from(file('warp10.conf'))
      into(file('./'))
      rename { f -> project.findProperty('g') + '-' + project.findProperty('a') + '.conf' }
    }
    delete 'warp10.conf'

    //
    // Delete templates
    //
    delete 'ext.template'
    delete 'plugin.template'
    delete 'function.template'
    delete 'settings.gradle.template'
    delete 'build.gradle.template'

    //
    // Delete .git directory
    //
    delete '.git'

    println 'Initialized'
  }
}
