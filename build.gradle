//
//   Copyright 2019 - 2023  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

import org.apache.tools.ant.filters.ReplaceTokens
import groovy.json.JsonOutput
plugins {
  id 'java'
}

//
// Repositories for the project dependencies
//

repositories {
  mavenCentral()
}

task('bootstrap') {
  def group
  def artifact
  def version
  def description
  def type

  if(!project.hasProperty('t')) {
    println "What kind of module (ext / plugin / macro)? : "
    type = System.in.newReader().readLine()
    println "Type is ${type}"
  } else {
    type = project.findProperty('t')
  }

  if(!project.hasProperty('g')) {
    println "Enter project's group (ie: io.warp10.ext.example): "
    group = System.in.newReader().readLine()
    println "Group is ${group}"
  } else {
    group = project.findProperty('g')
  }

  if(!project.hasProperty('a')) {
    println "Enter project's artifact (ie: warp10-ext-my-awesome-module): "
    artifact = System.in.newReader().readLine()
    println "Artifact is ${artifact}"
  } else {
    artifact = project.findProperty('a')
  }

  if(!project.hasProperty('d')) {
    println "Enter project's description: "
    description = System.in.newReader().readLine()
    println "Artifact description: ${description}"
  } else {
    description = project.findProperty('d')
  }

  if(!project.hasProperty('v')) {
    version = '0.0.1'
  } else {
    version = project.findProperty('v')
  }

  onlyIf {
    project.hasProperty('g') && project.hasProperty('a') && project.hasProperty('d')
  }
  println "Generating ${group}:${artifact}:${version}"
  //
  // Replace properties in build.gradle and settings.gradle
  //
  doLast {
    copy {
      from(file('build.gradle.template'))
      into(file('./'))
      rename({ f -> 'build.gradle' })
      filter(ReplaceTokens, tokens: [
              MODULE_GROUP: "${group}".toString(),
              MODULE_ARTIFACT: "${artifact}".toString(),
              MODULE_DESCRIPTION: "${description}".toString(),
              MODULE_VERSION: "${version}".toString()
      ])
    }
    copy {
      from(file('settings.gradle.template'))
      into(file('./'))
      rename({ f -> 'settings.gradle' })
      filter(ReplaceTokens, tokens: [
              MODULE_GROUP: "${group}".toString(),
              MODULE_ARTIFACT: "${artifact}".toString(),
              MODULE_DESCRIPTION: "${description}".toString(),
      ])
    }
    //
    // Create Java source directories
    //
    mkdir 'src/main/java'
    mkdir 'src/test/java'

    //
    // Create resource directory
    //
    mkdir 'src/main/resources'

    //
    // Create WarpScript source directory
    //
    def wsdir = 'src/main/warpscript/' + g + '/' + a
    mkdir wsdir

    //
    // Create template if the module type was specified (either ext or plugin)
    //
    if (type) {
      def dir = g.replaceAll('\\.','/')
      mkdir 'src/main/java/' + dir

      if ('ext' == type) {
        copy {
          from(file('ext.template'))
          into(file('./src/main/java/' + dir))
          rename({ f -> 'PleaseRenameWarpScriptExtension.java' })
          filter(ReplaceTokens, tokens: [
                  PACKAGE_NAME: "${group}".toString(),
          ])
        }
        copy {
          from(file('function.template'))
          into(file('./src/main/java/' + dir))
          rename({ f -> 'PleaseRenameFunction.java' })
          filter(ReplaceTokens, tokens: [
                  PACKAGE_NAME: "${group}".toString(),
          ])
        }
        copy {
          from(file('ext.doc.mc2.template'))
          into(file(wsdir))
          rename({ f -> 'PleaseRenameFunction.mc2' })
          filter(ReplaceTokens, tokens: [
                  MODULE_GROUP: "${group}".toString(),
                  MODULE_ARTIFACT: "${artifact}".toString(),
                  MODULE_DESCRIPTION: "${description}".toString()
          ])
        }
      } else if ('plugin' == type) {
        copy {
          from(file('plugin.template'))
          into(file('./src/main/java/' + dir))
          rename({ f -> 'PleaseRenameWarp10Plugin.java' })
          filter(ReplaceTokens, tokens: [
                  PACKAGE_NAME: "${group}".toString(),
          ])
        }
      }
    }

    //
    // Rename warp10.conf
    //
    copy {
      from(file('warp10.conf'))
      into(file('./'))
      rename { f -> group + '-' + artifact + '.conf' }
    }
    delete 'warp10.conf'

    //
    // Delete templates
    //
    delete 'ext.template'
    delete 'plugin.template'
    delete 'function.template'
    delete 'settings.gradle.template'
    delete 'build.gradle.template'

    //
    // Delete .git directory
    //
    delete '.git'
    def json = JsonOutput.toJson([
            group: group,
            artifact: artifact,
            version: version,
            description: description,
            type: type,
            classifier: "",
            license: "Apache-2",
            git: "https://github.com/${group}/${artifact}",
            author: System.getProperty("user.name"),
            email: "",
            repoUrl: "https://repo.maven.apache.org/maven2/${group.toString().replaceAll('\\.', '/')}/${artifact}",
            tags: [],
            conf: [],
            macros: [],
            dependencies: []
    ])
    File file = new File("wf.json")
    file.write(JsonOutput.prettyPrint(json))
    File readme = new File("README.md")
    readme.write("# ${group + '-' + artifact}\n\n${description}")

    println 'Initialized, please check wf.json'
  }
}
